// js/uiUpdates.js

function updateResourceDisplay() { biomassEl.textContent = Math.floor(gameState.resources.biomass); nanitesEl.textContent = Math.floor(gameState.resources.nanites); energyEl.textContent = Math.floor(gameState.resources.energy); biomassRateEl.textContent = gameState.productionRates.biomass.toFixed(1); nanitesRateEl.textContent = gameState.productionRates.nanites.toFixed(1); energyCapacityEl.textContent = gameState.capacity.energy; energyCostMoveEl.textContent = EXPLORATION_COST_ENERGY; }
function updateBuildingDisplay() { buildingsSection.innerHTML = '<h2 class="font-orbitron text-xl mb-3 text-blue-300 border-b border-gray-600 pb-2">Modules Structurels & Défensifs</h2>'; for (const id in buildingsData) { const building = buildingsData[id]; const level = gameState.buildings[id] || 0; const currentLevelData = level > 0 ? building.levels[level - 1] : null; const nextLevel = level < building.levels.length ? building.levels[level] : null; const div = document.createElement('div'); div.className = 'mb-4 p-3 bg-gray-800 rounded shadow'; let content = `<h3 class="text-lg font-semibold ${building.type === 'defense' ? 'text-yellow-400' : 'text-blue-400'}">${building.name} (Niv. ${level})</h3>`; content += `<p class="text-sm text-gray-400 mb-1">${building.description}</p>`; if (currentLevelData) { content += `<p class="text-xs text-gray-500">Effet actuel: `; let effects = []; if (currentLevelData.production) { effects.push(...Object.entries(currentLevelData.production).map(([res, val]) => `${val}/s ${res}`)); } if (currentLevelData.capacity) { effects.push(...Object.entries(currentLevelData.capacity).map(([res, val]) => `+${val} Cap. ${res}`)); } if (currentLevelData.researchSpeedFactor) { effects.push(`Vitesse Rech. x${currentLevelData.researchSpeedFactor}`); } if (currentLevelData.grantsModule && nanobotModulesData[currentLevelData.grantsModule]) { effects.push(`Débloque: ${nanobotModulesData[currentLevelData.grantsModule].name}`); } if (building.type === 'defense' && currentLevelData.stats) { effects.push(`Att: ${currentLevelData.stats.attack}, PV: ${currentLevelData.stats.health}`); } if (building.type === 'defense' && currentLevelData.baseHealthBonus) { effects.push(`PV Noyau: +${currentLevelData.baseHealthBonus}`); } content += effects.join(', ') || "Aucun"; content += ` / Cons.: ${currentLevelData.energyConsumption || 0} Énergie</p>`; } if (nextLevel) { const canAfford = Object.entries(nextLevel.cost).every(([res, val]) => gameState.resources[res] >= val); let costString = Object.entries(nextLevel.cost).map(([res, val]) => `${val} ${res}`).join(', '); content += `<button onclick="build('${id}')" class="btn ${canAfford ? (building.type === 'defense' ? 'btn-warning' : 'btn-primary') : 'btn-disabled'} mt-2 text-sm w-full" ${!canAfford ? 'disabled' : ''}>Améliorer (Coût: ${costString})</button>`; } else { content += `<p class="text-sm text-green-400 mt-2">Niveau Max Atteint</p>`; } div.innerHTML = content; buildingsSection.appendChild(div); } }
function updateResearchDisplay() { researchSection.innerHTML = '<h2 class="font-orbitron text-xl mb-3 text-blue-300 border-b border-gray-600 pb-2">Arbre Technologique</h2>'; if (activeResearch) { const research = researchData[activeResearch.id]; const timeRemaining = Math.max(0, Math.ceil(activeResearch.totalTime - (gameState.gameTime - activeResearch.startTime))); const progress = Math.min(100, ((activeResearch.totalTime - timeRemaining) / activeResearch.totalTime) * 100); researchSection.innerHTML += `<div class="mb-4 p-3 bg-gray-800 rounded shadow"><h3 class="text-lg font-semibold text-yellow-400">En cours: ${research.name}</h3><p class="text-sm text-gray-400 mb-1">${research.description}</p><div class="w-full bg-gray-700 rounded-full h-2.5 mb-1"><div class="bg-blue-500 h-2.5 rounded-full" style="width: ${progress}%"></div></div><p class="text-sm text-gray-300">Temps: ${formatTime(timeRemaining)}</p></div>`; } for (const id in researchData) { const research = researchData[id]; if (gameState.research[id]) { researchSection.innerHTML += `<div class="mb-2 p-3 bg-gray-700 rounded opacity-70"><h3 class="text-md font-semibold text-green-400">${research.name} (Terminé)</h3><p class="text-xs text-gray-500">${research.description}</p></div>`; continue; } if (activeResearch && activeResearch.id === id) continue; let canResearch = true; let requirementText = []; const costEntries = Object.entries(research.cost); costEntries.forEach(([res, val]) => { if (gameState.resources[res] < val) canResearch = false; }); let costString = costEntries.map(([res, val]) => `${val} ${res}`).join(', '); if (research.requirements) { if (research.requirements.buildings) { Object.entries(research.requirements.buildings).forEach(([bId, rLvl]) => { if ((gameState.buildings[bId] || 0) < rLvl) { canResearch = false; requirementText.push(`${buildingsData[bId].name} Niv. ${rLvl}`); } }); } if (research.requirements.research) { research.requirements.research.forEach(rId => { if (!gameState.research[rId]) { canResearch = false; requirementText.push(`Rech.: ${researchData[rId].name}`); } }); } } let effectsText = []; if (research.grantsModule && nanobotModulesData[research.grantsModule]) { effectsText.push(`Module: ${nanobotModulesData[research.grantsModule].name}`); } if (research.grantsStatBoost) { effectsText.push(...Object.entries(research.grantsStatBoost).map(([stat, val]) => `${stat.replace('base', '')}: +${val}`)); } const div = document.createElement('div'); div.className = 'mb-4 p-3 bg-gray-800 rounded shadow'; let content = `<h3 class="text-lg font-semibold text-blue-400">${research.name}</h3>`; content += `<p class="text-sm text-gray-400 mb-1">${research.description}</p>`; if (effectsText.length > 0) content += `<p class="text-xs text-green-300 mb-1">Effet: ${effectsText.join(', ')}.</p>`; content += `<p class="text-xs text-gray-500 mb-1">Coût: ${costString}. Temps: ${formatTime(research.time)}.</p>`; if (requirementText.length > 0) content += `<p class="text-xs text-yellow-500 mb-1">Prérequis: ${requirementText.join(', ')}.</p>`; content += `<button onclick="startResearch('${id}')" class="btn ${canResearch && !activeResearch ? 'btn-primary' : 'btn-disabled'} mt-2 text-sm w-full" ${(!canResearch || activeResearch) ? 'disabled' : ''}>Lancer</button>`; div.innerHTML = content; researchSection.appendChild(div); } }
function updateNanobotDisplay() { nanobotHealthEl.textContent = `${Math.floor(gameState.nanobotStats.currentHealth)} / ${gameState.nanobotStats.health}`; nanobotAttackEl.textContent = gameState.nanobotStats.attack; nanobotDefenseEl.textContent = gameState.nanobotStats.defense; nanobotSpeedEl.textContent = gameState.nanobotStats.speed; nanobotVisualBody.innerHTML = ''; let equippedModulesNames = []; gameState.activeModules.forEach(moduleId => { const moduleData = nanobotModulesData[moduleId]; if (moduleData) { equippedModulesNames.push(moduleData.name); if (moduleData.visualClass) { const visualEl = document.createElement('div'); visualEl.className = `nanobot-module ${moduleData.visualClass}`; nanobotVisualBody.appendChild(visualEl); } else if (moduleData.visualClasses) { moduleData.visualClasses.forEach(className => { const visualEl = document.createElement('div'); visualEl.className = `nanobot-module ${className}`; nanobotVisualBody.appendChild(visualEl); }); } } }); equippedModulesDisplayEl.textContent = equippedModulesNames.length > 0 ? `Modules: ${equippedModulesNames.join(', ')}` : "Aucun module actif."; let equippedItemsNames = []; for (const slot in gameState.nanobotEquipment) { const itemId = gameState.nanobotEquipment[slot]; if (itemId && itemsData[itemId]) { const item = itemsData[itemId]; equippedItemsNames.push(item.name); if (item.visualClass) { const visualEl = document.createElement('div'); visualEl.className = `nanobot-item-visual ${item.visualClass}`; nanobotVisualBody.appendChild(visualEl); } } } equippedItemsDisplayBriefEl.textContent = equippedItemsNames.length > 0 ? `Équipement: ${equippedItemsNames.join(', ')}` : "Aucun équipement."; updateEquippedItemsDisplay(); }
function updateEquippedItemsDisplay() { nanobotEquipmentSlotsEl.innerHTML = ''; for (const slotId in EQUIPMENT_SLOTS) { const slotName = EQUIPMENT_SLOTS[slotId]; const itemId = gameState.nanobotEquipment[slotId]; const item = itemId ? itemsData[itemId] : null; const slotDiv = document.createElement('div'); slotDiv.className = 'equipment-slot'; let content = `<div class="item-details"><span class="slot-name">${slotName}:</span> `; if (item) { content += `<span class="equipped-item-name">${item.name}</span>`; if (item.statBoost) { content += `<span class="item-stats ml-2">(${Object.entries(item.statBoost).map(([s,v]) => `${s.charAt(0).toUpperCase()+s.slice(1)}: ${v > 0 ? '+' : ''}${v}`).join(', ')})</span>`; } } else { content += `<span class="empty-slot">Vide</span>`; } content += `</div>`; if (item) { content += `<button class="btn btn-secondary btn-sm" onclick="unequipItem('${slotId}')">Retirer</button>`; } slotDiv.innerHTML = content; nanobotEquipmentSlotsEl.appendChild(slotDiv); } }
function updateXpBar() { const stats = gameState.nanobotStats; if (!stats.level) return; const percent = (stats.xp / stats.xpToNext) * 100; xpBarEl.style.width = percent + "%"; }

function updateBaseStatusDisplay() {
    const base = gameState.baseStats;
    baseHealthValueEl.textContent = Math.floor(base.currentHealth);
    baseMaxHealthValueEl.textContent = base.maxHealth;
    overviewBaseHealthEl.textContent = `${Math.floor(base.currentHealth)} / ${base.maxHealth}`;
    const healthPercent = (base.maxHealth > 0 ? (base.currentHealth / base.maxHealth) : 0) * 100; 
    baseHealthBarEl.style.width = `${healthPercent}%`;
    baseHealthBarEl.classList.remove('low', 'medium');
    if (healthPercent < 30) baseHealthBarEl.classList.add('low');
    else if (healthPercent < 60) baseHealthBarEl.classList.add('medium');

    baseDefensePowerEl.textContent = `Puissance Défensive: ${base.defensePower}`;
    repairBaseBtn.disabled = gameState.baseStats.currentHealth >= gameState.baseStats.maxHealth;
    let hasDamagedDefenses = false;
    for (const defId in gameState.defenses) { if (gameState.defenses[defId].currentHealth < gameState.defenses[defId].maxHealth) { hasDamagedDefenses = true; break; } }
    repairDefensesBtn.disabled = !hasDamagedDefenses;

    let defenseDetails = [];
    for (const buildingId in gameState.defenses) { const defense = gameState.defenses[buildingId]; defenseDetails.push(`${defense.name} Niv.${defense.level} (PV: ${Math.floor(defense.currentHealth)}/${defense.maxHealth}, Att: ${defense.attack})`); }
    activeDefensesDisplayEl.innerHTML = defenseDetails.length > 0 ? `<strong>Défenses Actives:</strong><br>` + defenseDetails.join('<br>') : "<strong>Aucune défense active.</strong>";
    
    overviewContentElTab.classList.toggle('night-assault-active', gameState.nightAssault.isActive);
    baseHealthDisplayEl.classList.toggle('text-red-400', gameState.nightAssault.isActive);
    baseHealthDisplayEl.classList.toggle('font-bold', gameState.nightAssault.isActive);

    nightAssaultEnemiesDisplayEl.innerHTML = ""; 
    if (gameState.nightAssault.isActive && gameState.nightAssault.enemies.length > 0) {
        gameState.nightAssault.enemies.forEach(group => {
            const displayCount = Math.min(group.count, 20); 
            for (let i = 0; i < displayCount; i++) {
                const dot = document.createElement('div');
                dot.classList.add('assault-enemy-dot');
                if (group.id === 'swarm_drone') dot.classList.add('drone');
                else if (group.id === 'assault_bot') dot.classList.add('bot');
                else if (group.id === 'heavy_crawler') dot.classList.add('crawler');
                dot.title = `${group.name} (PV: ${group.baseHealth} / Att: ${group.baseAttack})`; 
                nightAssaultEnemiesDisplayEl.appendChild(dot);
            }
            if (group.count > 20) { const moreText = document.createElement('span'); moreText.className = 'text-xs text-gray-400 italic ml-1'; moreText.textContent = `(+${group.count - 20} ${group.name.split(' ')[0]}s)`; nightAssaultEnemiesDisplayEl.appendChild(moreText); }
        });
    } else if (gameState.nightAssault.isActive && gameState.nightAssault.enemies.length === 0 && gameState.baseStats.currentHealth > 0){
            nightAssaultEnemiesDisplayEl.innerHTML = `<p class="text-green-400 italic text-xs">Vague ennemie neutralisée. En attente...</p>`;
    } else {
        nightAssaultEnemiesDisplayEl.innerHTML = `<p class="text-gray-500 italic text-xs">Aucune menace détectée pour le moment.</p>`;
    }
}

function updateDisplays() { updateResourceDisplay(); updateBuildingDisplay(); updateResearchDisplay(); updateNanobotDisplay(); updateInventoryDisplay(); updateShopDisplay(); updateXpBar(); updateBaseStatusDisplay(); if (explorationContentEl && explorationContentEl.classList.contains('hidden') === false) updateExplorationDisplay(); }